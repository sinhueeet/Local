git init Local
Crear un repositorio git, el cual se crea en el path actual, por lo que se recomienda crear un folder para dicho repositorio antes que el repositorio en sí.

git status

git add octocat.txt
octocat.txt es el nombre del archivo; add es para integrar un archivo al "stage", archivos en esta área de trabajo serán guardados a través de un commit.

git commit -m "Add cute octocat story"
Agregar una descripción entre las "" o ''

git remote add origin https://github.com/try-git/try_git.git
origin es el nombre o etiqueta para la url; se requiere contar con el .git

git log

git push -u origin master
cargar contenido ; con -u el intérprete guardará los parámetros para próximas cargas

git pull origin master
revisar cambios al repositorio

git diff HEAD
reportar diferencias en el contenido a partir de la última vez que se hizo commit.
HEAD es un puntero que comunmente se utiliza para referenciar al último o más reciente commit.

git diff --staged
revisión de diferencias en los archivos considerando el "stage".

git reset octofamily/octodog.txt
quitar del área de "staging"

git checkout -- octocat.txt
este comando permite deshacerse de los cambios posteriores al último commit.

git branch clean_up
Crear una rama llamada clean_up

git branch
Muestra las tramas existentes.

git checkout clean_up
Cambia de rama a clean_up

git rm '*.txt'
Borrado de archivos de acuerdo al nombre o comidín.

git commit -m "Remove all the cats"
guarda el borrado de archivos.

git merge clean_up
mezclar los contenidos de clean_up hacia master; master o la rama original.

git branch -d clean_up
borrar la trama o rama.

git push
actualizar el repositorio remoto.

-----Ayuda GIT; desplegada desde CMD
C:\Windows\System32>git
usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Forward-port local commits to the updated upstream head
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch

   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.

C:\Windows\System32>